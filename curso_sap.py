import streamlit as st
from decouple import config
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains.retrieval import create_retrieval_chain
from langchain_core.prompts import PromptTemplate, ChatPromptTemplate
from langchain_groq.chat_models import ChatGroq
from groq import Groq

groq_api_key = config('GROQ_API_KEY')


def ask_question(query):
    # llm = ChatGroq(
    #     temperature=0.4,
    #     model_name=model,
    #     api_key=groq_api_key
    # )
    client = Groq(
        api_key=groq_api_key
    )
    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "user",
                "content": query
            },
            {
                "role": "assistant",
                "content": "Obrigado por perguntar!\n\n√â importante notar que a letalidade de uma arma depende de v√°rias vari√°veis, como sua utiliza√ß√£o, a habilidade do usu√°rio e as circunst√¢ncias em que √© usada. Al√©m disso, n√£o h√° uma resposta √∫nica para essa pergunta, pois diferentes armas podem ser extremamente perigosas em diferentes contextos.\n\nQue s√£o algumas das armas mais letais do mundo:\n\n1. **Sniper rifle:** Essas armas de fogo longo s√£o projetadas para disparar muni√ß√£o de precis√£o a grandes dist√¢ncias. Elas podem ser usadas para atacar alvos movedi√ßos e est√°ticos a partir de dist√¢ncias significantes.\n2. **Machine gun:** Armas de fogo r√°pido podem causar danos massivos em um curto per√≠odo de tempo. Eles s√£o frequentemente usados em conflitos em larga escala.\n3. **Nuclear weapons:** As armas nucleares s√£o consideradas as mais letais do mundo, pois podem causar danos imensos e perdas humanas em grandes √°reas.\n4. **Hand grenades:** Essas armas podem causar danos letais em √°reas fechadas e podem ser usadas em combina√ß√£o com outras armas.\n5. **Guided missiles:** Foguetes guias s√£o projecteis direcionados que podem ser usados para atacar alvos movimentados a partir de dist√¢ncias significativas.\n\n√â importante lembrar que a letalidade de uma arma n√£o √© necessariamente igual √† sua efic√°cia em batalha. Al√©m disso, a possibilidade de uso indevido de armas pode causar danos significativos a pessoas inocentes e ao meio ambiente.\n\n√â fundamental ressaltar que a seguran√ßa √© o primeiro passo para a preven√ß√£o de perdas humanas e danos ao meio ambiente."
            }
        ],
        temperature=1,
        max_tokens=1024,
        top_p=1,
        stream=True,
        stop=None,
    )
    breakpoint()
    return completion


    # system_prompt = '''
    # Use o contexto para responder as perguntas.
    # Se n√£o encontrar uma resposta no contexto,
    # explique que n√£o h√° informa√ß√µes dispon√≠veis.
    # Responda em formato de markdown e com visualiza√ß√µes
    # elaboradas e interativas.
    # Contexto: {context}
    # '''
    # messages = [('system', system_prompt)]
    # for message in st.session_state.messages:
    #     messages.append((message.get('role'), message.get('content')))
    # messages.append(('human', '{input}'))
    #
    # prompt = ChatPromptTemplate.from_messages(messages)

    return llm.invoke({'input': query})

model='llama3-70b-8192'

st.set_page_config(
    page_title='SAP GPT',
    page_icon='üìÑ',
)
st.header(
    'Assistente Virtual das quest√µes do curso SAP'
)
st.sidebar.markdown('### Sobre')
st.sidebar.markdown(
    'Qual a maior linguagem do mundo?'
)
question = st.chat_input('Como posso ajudar?')
user_question = st.text_input('O que deseja saber?')
prompt = '''
    Exercitando os conceitos de PLN utilizando NLTK, Spacy e Transformers
    Considerando as abordagens e exemplifica√ß√µes demonstradas no encontro de 05/10/2024:
    Segmenta√ß√£o
    Tokeniza√ß√£o
    Tagger
    Stemmer
    Corpus
    Lematiza√ß√£o
    Similaridade
    Desenvolva uma aplica√ß√£o √∫til utilizado esses recursosA resposta final deve ter uma formata√ß√£o amig√°vel de visualiza√ß√£o para o usu√°rio.
    Sempre responda em portugu√™s brasileiro.
    Pergunta: {q}
    '''
prompt_template = PromptTemplate.from_template(prompt)
st.chat_message('user').write(question)
# for chunk in completion:
#     print(chunk.choices[0].delta.content or "", end="")

if st.button('Consultar'):
    if user_question:
        with st.spinner('Buscando resposta...'):
            response = ask_question(query=question)
    else:
        st.warning('Por favor, insira uma pergunta.')
